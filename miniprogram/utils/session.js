// ‰ºöËØùÁÆ°ÁêÜÂ∑•ÂÖ∑

const app = getApp()
const { createSession, getSession, updateSession, calculateMatch, setStorage, getStorage, removeStorage } = require('./cloud')

// Êú¨Âú∞Â≠òÂÇ®ÈîÆÂêç
const STORAGE_KEYS = {
  CURRENT_SESSION: 'current_session',
  USER_INFO: 'user_info',
  SETTINGS: 'settings'
}

// ÁîüÊàê‰ºöËØùID
const generateSessionId = () => {
  return Math.random().toString(36).substr(2, 9)
}

// ÂàõÂª∫Êñ∞‰ºöËØù
const createNewSession = async (user1Name, user2Name, user1Interests) => {
  try {
    showLoading('Ê≠£Âú®ÂàõÂª∫‰ºöËØù...')
    
    const result = await createSession(user1Name, user2Name, user1Interests)
    
    if (result.success) {
      // ‰øùÂ≠òÂΩìÂâç‰ºöËØùÂà∞Êú¨Âú∞
      const sessionData = {
        sessionId: result.sessionId,
        user1Name,
        user2Name,
        user1Interests,
        status: 'waiting',
        createdAt: new Date()
      }
      
      setStorage(STORAGE_KEYS.CURRENT_SESSION, sessionData)
      
      hideLoading()
      return {
        success: true,
        sessionId: result.sessionId,
        data: sessionData
      }
    } else {
      hideLoading()
      showError('ÂàõÂª∫‰ºöËØùÂ§±Ë¥•')
      return {
        success: false,
        error: result.error
      }
    }
  } catch (error) {
    hideLoading()
    console.error('ÂàõÂª∫‰ºöËØùÂ§±Ë¥•:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// Ëé∑Âèñ‰ºöËØù‰ø°ÊÅØ
const getSessionInfo = async (sessionId) => {
  try {
    showLoading('Ê≠£Âú®Ëé∑Âèñ‰ºöËØù...')
    
    const result = await getSession(sessionId)
    
    if (result.success) {
      hideLoading()
      return {
        success: true,
        data: result.data
      }
    } else {
      hideLoading()
      showError('Ëé∑Âèñ‰ºöËØùÂ§±Ë¥•')
      return {
        success: false,
        error: result.error
      }
    }
  } catch (error) {
    hideLoading()
    console.error('Ëé∑Âèñ‰ºöËØùÂ§±Ë¥•:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// Êõ¥Êñ∞‰ºöËØù‰ø°ÊÅØ
const updateSessionInfo = async (sessionId, updateData) => {
  try {
    const result = await updateSession(sessionId, updateData)
    
    if (result.success) {
      // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®
      const localSession = getStorage(STORAGE_KEYS.CURRENT_SESSION)
      if (localSession) {
        const updatedSession = { ...localSession, ...updateData }
        setStorage(STORAGE_KEYS.CURRENT_SESSION, updatedSession)
      }
      
      return {
        success: true,
        data: result.data
      }
    } else {
      return {
        success: false,
        error: result.error
      }
    }
  } catch (error) {
    console.error('Êõ¥Êñ∞‰ºöËØùÂ§±Ë¥•:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// ËÆ°ÁÆóÂåπÈÖçÁªìÊûú
const calculateMatchResult = async (sessionId, user2Interests) => {
  try {
    showLoading('Ê≠£Âú®ËÆ°ÁÆóÂåπÈÖç...')
    
    const result = await calculateMatch(sessionId, user2Interests)
    
    if (result.success) {
      // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®
      const localSession = getStorage(STORAGE_KEYS.CURRENT_SESSION)
      if (localSession) {
        const updatedSession = {
          ...localSession,
          user2Interests,
          matchResult: result.matchResult,
          status: 'completed'
        }
        setStorage(STORAGE_KEYS.CURRENT_SESSION, updatedSession)
      }
      
      hideLoading()
      return {
        success: true,
        matchResult: result.matchResult,
        getMatchLevel: result.getMatchLevel,
        getCategoryName: result.getCategoryName
      }
    } else {
      hideLoading()
      showError('ËÆ°ÁÆóÂåπÈÖçÂ§±Ë¥•')
      return {
        success: false,
        error: result.error
      }
    }
  } catch (error) {
    hideLoading()
    console.error('ËÆ°ÁÆóÂåπÈÖçÂ§±Ë¥•:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// Ëé∑ÂèñÂΩìÂâç‰ºöËØù
const getCurrentSession = () => {
  return getStorage(STORAGE_KEYS.CURRENT_SESSION)
}

// Ê∏ÖÈô§ÂΩìÂâç‰ºöËØù
const clearCurrentSession = () => {
  removeStorage(STORAGE_KEYS.CURRENT_SESSION)
}

// Ê£ÄÊü•‰ºöËØùÊòØÂê¶ËøáÊúü
const isSessionExpired = (sessionData) => {
  if (!sessionData || !sessionData.expireAt) return true
  
  const now = new Date()
  const expireAt = new Date(sessionData.expireAt)
  
  return now > expireAt
}

// ÁîüÊàêÂàÜ‰∫´ÈìæÊé•
const generateShareLink = (sessionId) => {
  // Â∞èÁ®ãÂ∫èÈ°µÈù¢Ë∑ØÂæÑ
  const path = `/pages/user-select/user-select?sessionId=${sessionId}`
  
  // Â¶ÇÊûúÊòØÂú®Â∞èÁ®ãÂ∫èÂÜÖÔºåËøîÂõûÈ°µÈù¢Ë∑ØÂæÑ
  // Â¶ÇÊûúÈúÄË¶ÅÂàÜ‰∫´Âà∞Â§ñÈÉ®ÔºåÂèØ‰ª•ÁîüÊàêÂ∞èÁ®ãÂ∫èÁ†Å
  return {
    path,
    miniProgramPath: path,
    // ÂèØ‰ª•Ê∑ªÂä†ÂÖ∂‰ªñÂàÜ‰∫´‰ø°ÊÅØ
    title: '‰∏ÉÂ§ïÊÉÖ‰æ£ÂåπÈÖçÊµãËØï',
    imageUrl: '/images/share.png'
  }
}

// Â§çÂà∂ÂàÜ‰∫´ÈìæÊé•
const copyShareLink = async (sessionId) => {
  const shareInfo = generateShareLink(sessionId)
  
  // ÂàõÂª∫ÂàÜ‰∫´ÊñáÊú¨
  const shareText = `üíå ‰∏ÉÂ§ïÊÉÖ‰æ£ÂåπÈÖçÊµãËØï\n\nÁÇπÂáªÈìæÊé•ÔºåÁúãÁúã‰Ω†‰ª¨ÊúâÂ§öÂåπÈÖçÔºÅ\n\nÂ∞èÁ®ãÂ∫èË∑ØÂæÑÔºö${shareInfo.path}`
  
  return await copyToClipboard(shareText)
}

// ‰øùÂ≠òÁî®Êà∑ËÆæÁΩÆ
const saveUserSettings = (settings) => {
  return setStorage(STORAGE_KEYS.SETTINGS, settings)
}

// Ëé∑ÂèñÁî®Êà∑ËÆæÁΩÆ
const getUserSettings = () => {
  return getStorage(STORAGE_KEYS.SETTINGS, {
    enableNotifications: true,
    autoSave: true,
    theme: 'default'
  })
}

// ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
const showLoading = (title = 'Âä†ËΩΩ‰∏≠...') => {
  wx.showLoading({
    title,
    mask: true
  })
}

// ÈöêËóèÂä†ËΩΩÊèêÁ§∫
const hideLoading = () => {
  wx.hideLoading()
}

// ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
const showSuccess = (title, duration = 2000) => {
  wx.showToast({
    title,
    icon: 'success',
    duration
  })
}

// ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
const showError = (title, duration = 2000) => {
  wx.showToast({
    title,
    icon: 'error',
    duration
  })
}

// Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø
const copyToClipboard = (data) => {
  return new Promise((resolve, reject) => {
    wx.setClipboardData({
      data: typeof data === 'string' ? data : JSON.stringify(data),
      success: () => {
        showSuccess('Â§çÂà∂ÊàêÂäü')
        resolve(true)
      },
      fail: (error) => {
        showError('Â§çÂà∂Â§±Ë¥•')
        reject(error)
      }
    })
  })
}

module.exports = {
  generateSessionId,
  createNewSession,
  getSessionInfo,
  updateSessionInfo,
  calculateMatchResult,
  getCurrentSession,
  clearCurrentSession,
  isSessionExpired,
  generateShareLink,
  copyShareLink,
  saveUserSettings,
  getUserSettings,
  STORAGE_KEYS
}